delimiters "$", "$"

header(name, cbuffers, texSets, shaderProgs, vertexLayout, structs, shaderProgNames, shaderPath) ::= <<
//////////////////////////////////////////////// 
////////// AUTOGENERATED FILE, DO NOT EDIT !//// 
//////////////////////////////////////////////// 
#include "stdafx.h"

#include <map>

#include "Math/Vector2.h"
#include "Math/Vector3.h"
#include "Math/Vector4.h"
#include "Math/Matrix3.h"
#include "Math/Matrix4.h"
#include "Render/Buffers/EngineBuffers.h"

#include "Render/ShaderInputBase.h"

namespace Kioto::Renderer::SInp
{

class $name$_sinp : public ShaderInputBase
{
public:
    $structs$

    $name$_sinp()
    {
        InitConstantBuffers();
        InitTextureSet();
        InitShaderProgs();
        InitVertexLayout();
        InitProgNames();
        SetShaderPath();
    };

    ShaderBufferLayoutTemplate GetLayoutTemplate() const override
    {
        return m_cbs;
    }

    ShaderData GetShaderData() const override
    {
        return m_sdata;
    }

    std::string GetProgramName(ShaderProgramType type) const override
    {
        return m_progNames.at(type);
    }

private:
    void InitConstantBuffers()
    {
        $cbuffers$
    }

    void InitTextureSet()
    {
        $texSets$
        m_sdata.textureSet = std::move(tSet);
    }

    void InitShaderProgs()
    {
        m_sdata.shaderPrograms = 0;
        m_sdata.shaderPrograms |= $shaderProgs$;
    }

    void InitVertexLayout()
    {
        VertexLayout vl;
        $vertexLayout$
        m_sdata.vertexLayout = std::move(vl);
    }

    void InitProgNames()
    {
        $shaderProgNames$;
    }

    void SetShaderPath()
    {
        m_sdata.shaderPath = "$shaderPath$";
    }

    ShaderBufferLayoutTemplate m_cbs;
    ShaderData m_sdata;
    std::map<ShaderProgramType, std::string> m_progNames;
};
}
>>

cbuffer(cbname, reg, space, typename, size) ::= <<
ConstantBuffer<$typename$> $cbname$($reg$, $space$$if(size)$, $size$$endif$);
m_cbs.push_back(std::move($cbname$));

////////////////////////////////
>>

cbmember(cbname, memberName, initVal) ::= <<
$cbname$.Add("$memberName$", $initVal$);
>>

texSet(addParams) ::= <<
TextureSet tSet;
$addParams$

////////////////////////////////
>>

texture(name, reg) ::= <<
tSet.AddTexture("$name$", $reg$, nullptr);
>>

vlayoutmember(semantic, index, format) ::= <<
vl.AddElement($semantic$, $index$, $format$);
>>

programNamePair(shaderProg, name) ::= <<
m_progNames[$shaderProg$] = "$name$";
>>

structMember(type, name) ::= "$type$ $name$;"

struct(name, members) ::= <<
struct $name$
{
    $members$
};

>>