header(name, cbuffers, texSets, shaderProgs, vertexLayout) ::= <<
//////////////////////////////////////////////// 
////////// AUTOGENERATED FILE, DO NOT EDIT !//// 
//////////////////////////////////////////////// 
#include "stdafx.h"

#include "Math/Vector2.h"
#include "Math/Vector3.h"
#include "Math/Vector4.h"
#include "Math/Matrix3.h"
#include "Math/Matrix4.h"
#include "Render/Buffers/EngineBuffers.h"

namespace Kioto::Renderer::SInp
{
class <name>_sinp : public ShaderInputBase
{
public:
    <name>_sinp()
    {
        InitConstantBuffers();
        InitTextureSet();
        InitShaderProgs();
        InitVertexLayout();
    };

    ShaderBufferLayoutTemplate GetLayoutTemplate() const override
    {
        return m_cbs;
    }

    ShaderData GetShaderData() const override
    {
        return m_sdata;
    }

private:
    void InitConstantBuffers()
    {
        <cbuffers>
    }

    void InitTextureSet()
    {
        <texSets>
        m_sdata.textureSet = std::move(tSet);
    }

    void InitShaderProgs()
    {
        m_sdata.shaderPrograms = 0;
        m_sdata.shaderPrograms |= <shaderProgs>;
    }

    void InitVertexLayout()
    {
        VertexLayout vl;
        <vertexLayout>
        m_sdata.vertexLayout = std::move(vl);
    }

    ShaderBufferLayoutTemplate m_cbs;
    ShaderData m_sdata;
};
}
>>

cbuffer(cbname, reg, space, addParams) ::= <<
ConstantBuffer <cbname>(<reg>, <space>);
<addParams>
m_cbs.push_back(std::move(<cbname>));

////////////////////////////////
>>

cbmember(cbname, memberName, initVal) ::= <<
<cbname>.Add(<memberName>, <initVal>);
>>

texSet(addParams) ::= <<
TextureSet tSet;
<addParams>

////////////////////////////////
>>

texture(name, reg) ::= <<
tSet.AddTexture(<name>, <reg>, nullptr);
>>

vlayoutmember(semantic, index, format) ::= <<
vl.AddElement(<semantic>, <index>, <format>);
>>